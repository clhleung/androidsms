apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId "com.beckoningtech.fastandcustomizablesms"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled true
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testCoverageEnabled false

        }
    }
    lintOptions{
        abortOnError false
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:3.0.1', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    })
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:3.0.1'
    compile project(":library")
    compile project(":chips")
    //compile 'com.klinkerapps:android-smsmms:4.2.3'
    compile 'com.android.support:appcompat-v7:25.4.0'
    compile 'com.android.support:recyclerview-v7:25.4.0'
    compile 'com.android.support:leanback-v17:25.4.0'
    compile 'com.android.support:gridlayout-v7:25.4.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.4.0'
    compile 'com.android.support:support-v4:25.4.0'
    compile 'com.android.support:preference-v7:25.4.0'
    testCompile 'junit:junit:4.12'
    compile "com.google.android.gms:play-services-location:11.6.2"
    testCompile 'org.mockito:mockito-core:1.10.19'
}
// Jacoco config
apply plugin: 'jacoco'

jacoco {
    // Use this version for upper ones are broken (with Gradle)
    // https://github.com/jacoco/jacoco/issues/288
    toolVersion = "0.7.1.201405082137"
}

// Edit covered scope if needed
// For my part I like having the coverage of both application and tests
def coverageSourceDirs = [
        '../app/src'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"

    description = "Generate Jacoco coverage reports"

    classDirectories = fileTree(
            dir: '../app/build/intermediates/classes',
            excludes: ['**/R.class',
                       '**/R$*.class',
                       '**/*$ViewInjector*.*',
                       '**/BuildConfig.*',
                       '**/Manifest*.*']
    )

    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('../app/build/jacoco/testUnitTestDebug.exec')

    reports {
        xml.enabled = true
        html.enabled = true
    }
}
//end Jacoco config

android.applicationVariants.all { variant ->
    def applicationId = variant.applicationId
    def adb = android.getAdbExe().toString()
    def variantName = variant.name.capitalize()
    def grantPermissionTask = tasks.create("grant${variantName}Permissions") << {
        "${adb} devices".execute().text.eachLine {
            if (it.endsWith("device")){
                def device = it.split()[0]
                println "Granting permissions on devices ${device}"
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.SEND_SMS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.READ_SMS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_SMS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.RECEIVE_SMS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.RECEIVE_MMS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.VIBRATE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.provider.Telephony.SMS_RECEIVED".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WAKE_LOCK".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.INTERNET".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_WIFI_STATE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.CHANGE_WIFI_STATE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.CHANGE_NETWORK_STATE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_NETWORK_STATE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_EXTERNAL_STORAGE".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_SETTINGS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.READ_CONTACTS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.WRITE_CONTACTS".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.RECEIVE_BOOT_COMPLETED".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_FINE_LOCATION".execute()
                "${adb} -s ${device} shell pm grant ${applicationId} android.permission.ACCESS_COARSE_LOCATION".execute()

            }
        }
    }
}
